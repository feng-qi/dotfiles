## Main
# main
snippet main
int main(int argc, const char *argv[])
{
	${0}

	return 0;
}
endsnippet

# main(void)
snippet mainn
int main(void)
{
	${0}
	return 0;
}
endsnippet

##
## Preprocessor
# #include <...>
snippet inc
#include <${1:stdio}.h>${0}
endsnippet

# #include "..."
snippet Inc
#include "${1:`vim_snippets#Filename("$1.h")`}"${0}
endsnippet

# ifndef...define...endif
snippet ndef
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

# define
snippet def
#define
endsnippet

# ifdef...endif
snippet ifdef
#ifdef ${1:FOO}
	${2:#define }
#endif
endsnippet

# if
snippet #if
#if ${1:FOO}
	${0}
#endif
endsnippet

# header include guard
snippet once
#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

#define $1

${0}

#endif /* end of include guard: $1 */
endsnippet

##
## Control Statements
# if
snippet if
if (${1:true}) {
	${2}
}${0}
endsnippet

snippet ife
if (${1:true}) {
	${2}
} else {
	${3}
}${0}
endsnippet

# else
snippet el
else {
	${1}
}${0}
endsnippet

# else if
snippet elif
else if (${1:true}) {
	${2}
}${0}
endsnippet

# ifi
snippet ifi
if (${1:true}) ${1};${0}
endsnippet

# ternary
snippet t
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# switch
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}${0}
endsnippet

# switch without default
snippet switchndef
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
}
endsnippet

# case
snippet case
case ${1:/* variable case */}:
	${2}
	${3:break;}
endsnippet

snippet ret
return ${0};
endsnippet

##
## Loops
# for
snippet for
for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# for (custom)
snippet forr
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
	${5}
}
endsnippet

# while
snippet wh
while (${1:/* condition */}) {
	${2}
}
endsnippet

# do... while
snippet do
do {
	${2}
} while (${1:/* condition */});
endsnippet

##
## Functions
# function definition
snippet fun
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet

# static function definition
snippet sfun
static ${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet

# function declaration
snippet fund
${1:void} ${2:function_name}(${3});
endsnippet

##
## Types
# typedef
snippet td
typedef ${1:int} ${2:MyCustomType};
endsnippet

# struct
snippet st
struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
	${2:/* data */}
}${3: /* optional variable list */};
endsnippet

# typedef struct
snippet tds
typedef struct ${2:_$1 }{
	${3:/* data */}
} ${1:`vim_snippets#Filename('$1_t', 'name')`};
endsnippet


snippet enum
enum ${1:name} { ${0} };
endsnippet

# typedef enum
snippet tde
typedef enum {
	${1:/* data */}
} ${2:foo};
endsnippet

##
## Input/Output
# printf
snippet pr
printf("${1:%s}\n"${2});
endsnippet

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet

##
## Miscellaneous
# This is kind of convenient
snippet .
[${1}]
endsnippet

